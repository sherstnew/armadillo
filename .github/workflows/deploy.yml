name: Deploy to Server

on:
  push:
    branches: [ main, master ]
    paths:
      - 'frontend/**'

env:
  IMAGE_NAME: frontend-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        cd frontend
        docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${{ github.sha }} .
        docker images

    - name: Save Docker image
      run: |
        cd frontend
        docker save $IMAGE_NAME:latest -o frontend-image.tar
        ls -la
        du -h frontend-image.tar

    - name: Debug - List files before SCP
      run: |
        cd frontend
        echo "Files in frontend directory:"
        ls -la
        echo "File size:"
        du -h frontend-image.tar || echo "File not found"

    - name: Deploy to server
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        source: "frontend/frontend-image.tar"
        target: "/tmp/"
        debug: true

    - name: Verify file on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          echo "Checking if file exists on server:"
          ls -la /tmp/frontend-image.tar || echo "File not found"
          echo "File size on server:"
          du -h /tmp/frontend-image.tar || echo "Cannot get file size"

    - name: Run on server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          set -e  # Остановить при ошибке
          
          echo "=== Step 1: Check file existence ==="
          if [ ! -f /tmp/frontend-image.tar ]; then
            echo "ERROR: File /tmp/frontend-image.tar does not exist!"
            exit 1
          fi
          
          echo "=== Step 2: Load Docker image ==="
          docker load -i /tmp/frontend-image.tar
          
          echo "=== Step 3: Check if image loaded ==="
          docker images | grep frontend-app || echo "Image not found after load"
          
          echo "=== Step 4: Stop old container ==="
          docker stop frontend-container || echo "No container to stop"
          docker rm frontend-container || echo "No container to remove"
          
          echo "=== Step 5: Run new container ==="
          docker run -d \
            --name frontend-container \
            --restart unless-stopped \
            -p 3000:3000 \
            -e NODE_ENV=production \
            frontend-app:latest
          
          echo "=== Step 6: Check container status ==="
          sleep 5
          docker ps | grep frontend-container || echo "Container not running"
          docker logs frontend-container || echo "Cannot get logs"
          
          echo "=== Step 7: Check port 3000 ==="
          curl -f http://localhost:3000 || echo "Port 3000 not responding"
          
          echo "=== Step 8: Cleanup ==="
          rm -f /tmp/frontend-image.tar
          docker system prune -f

    - name: Cleanup local
      run: |
        rm -f frontend/frontend-image.tar