import { TokenResponse } from '@/types/tts'
import { ttsCache } from './tts-cache'

class TTSService {
  private token: string | null = null
  private expiresAt: number | null = null
  private renewPromise: Promise<string> | null = null
  private tokenCheckInterval: NodeJS.Timeout | null = null

  async getToken(forceRefresh = false): Promise<string> {
    // –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    if (forceRefresh || !this.isTokenValid()) {
      console.log('üîÑ Token refresh required')
      return await this.refreshToken()
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∂–¥–µ–º –µ–≥–æ
    if (this.renewPromise) {
      return this.renewPromise
    }

    return this.token!
  }

  private isTokenValid(): boolean {
    if (!this.token || !this.expiresAt) {
      return false
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –≤ 2 –º–∏–Ω—É—Ç—ã –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞
    const now = Date.now()
    const bufferTime = 2 * 60 * 1000 // 2 –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    return now < (this.expiresAt / 1000 - bufferTime)
  }

  private async refreshToken(): Promise<string> {
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –∂–¥–µ–º –µ–≥–æ
    if (this.renewPromise) {
      return this.renewPromise
    }

    this.renewPromise = this.fetchNewToken()
    try {
      this.token = await this.renewPromise
      console.log('‚úÖ Token refreshed successfully')
      return this.token
    } finally {
      this.renewPromise = null
    }
  }

  private async fetchNewToken(): Promise<string> {
    console.log('üîÑ Fetching new token from API...')
    
    const response = await fetch('/api/tts/token', {
      method: 'POST'
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Token request failed:', response.status, errorText)
      throw new Error(`Token request failed: ${response.status} ${response.statusText}`)
    }

    const data: TokenResponse = await response.json()
    
    // expires_at —É–∂–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    this.expiresAt = data.expires_at * 1000
    this.token = data.access_token

    console.log('üìù Token expires at:', new Date(this.expiresAt).toLocaleTimeString())

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    if (typeof window !== 'undefined') {
      localStorage.setItem('tts_token', data.access_token)
      localStorage.setItem('tts_expires_at', this.expiresAt.toString())
    }

    return data.access_token
  }

  async synthesizeSpeech(text: string): Promise<{ blob: Blob; cached: boolean }> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cachedResult = await ttsCache.getCachedAudio(text)
    if (cachedResult) {
      console.log('üéµ Using cached TTS audio for:', text.substring(0, 50) + '...')
      return { blob: cachedResult.blob, cached: true }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    const token = await this.getToken()

    console.log('üîä Making TTS request...')
    const response = await fetch('/api/tts/synthesize', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ text, token })
    })

    if (!response.ok) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
      if (response.status === 401) {
        console.log('üîÑ Token expired, refreshing...')
        const newToken = await this.getToken(true) // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        const retryResponse = await fetch('/api/tts/synthesize', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ text, token: newToken })
        })

        if (!retryResponse.ok) {
          throw new Error(`TTS request failed after token refresh: ${retryResponse.statusText}`)
        }

        const blob = await retryResponse.blob()
        await this.cacheAudio(text, blob)
        return { blob, cached: false }
      }

      throw new Error(`TTS request failed: ${response.status} ${response.statusText}`)
    }

    const blob = await response.blob()

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    await this.cacheAudio(text, blob)

    return { blob, cached: false }
  }

  private async cacheAudio(text: string, blob: Blob): Promise<void> {
    try {
      await ttsCache.cacheAudio(text, blob)
      console.log('üíæ Audio cached successfully for:', text.substring(0, 50) + '...')
    } catch (error) {
      console.error('Error caching audio:', error)
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage
  restoreToken(): void {
    if (typeof window === 'undefined') return

    const savedToken = localStorage.getItem('tts_token')
    const savedExpiresAt = localStorage.getItem('tts_expires_at')

    if (savedToken && savedExpiresAt) {
      const expiresAt = parseInt(savedExpiresAt)
      this.token = savedToken
      this.expiresAt = expiresAt
      
      console.log('üîç Restored token from storage, expires:', new Date(expiresAt).toLocaleTimeString())
      
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∑–∞—Ä–∞–Ω–µ–µ
      if (!this.isTokenValid()) {
        console.log('‚ö†Ô∏è Restored token is expired or expiring soon')
        this.refreshToken().catch(error => {
          console.error('Failed to refresh token on restore:', error)
        })
      }
    } else {
      console.log('üìù No saved token found, will fetch when needed')
    }

    // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–µ—à–µ
    ttsCache.cleanupExpired()

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞
    this.startTokenMonitor()
  }

  private startTokenMonitor(): void {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if (this.tokenCheckInterval) {
      clearInterval(this.tokenCheckInterval)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    this.tokenCheckInterval = setInterval(() => {
      if (this.token && this.expiresAt) {
        const timeUntilExpiry = this.expiresAt - Date.now()
        const fiveMinutes = 5 * 60 * 1000
        
        if (timeUntilExpiry < fiveMinutes && !this.renewPromise) {
          console.log('üîÑ Proactive token refresh (expiring soon)')
          this.refreshToken().catch(error => {
            console.error('Proactive token refresh failed:', error)
          })
        }
      }
    }, 30 * 1000) // 30 —Å–µ–∫—É–Ω–¥
  }

  clearToken(): void {
    this.token = null
    this.expiresAt = null
    
    if (this.tokenCheckInterval) {
      clearInterval(this.tokenCheckInterval)
      this.tokenCheckInterval = null
    }
    
    if (typeof window !== 'undefined') {
      localStorage.removeItem('tts_token')
      localStorage.removeItem('tts_expires_at')
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–º
  getCacheStats() {
    return ttsCache.getCacheStats()
  }

  clearCache(): void {
    ttsCache.cleanupCache()
  }

  // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
  getTokenInfo() {
    return {
      hasToken: !!this.token,
      expiresAt: this.expiresAt ? new Date(this.expiresAt).toLocaleTimeString() : null,
      isValid: this.isTokenValid(),
      timeUntilExpiry: this.expiresAt ? this.expiresAt - Date.now() : null
    }
  }
}

export const ttsService = new TTSService()