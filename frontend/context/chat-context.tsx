"use client"

import React, { createContext, useContext, useState, useCallback, useEffect } from 'react'
import { Message, ChatState } from '@/types/chat'
import { Conversation, ChatMessage as ApiChatMessage } from '@/types/api'
import { websocketService } from '@/lib/websocket-service'
import { useAuth } from '@/context/auth-context'
import { apiService } from '@/lib/api'

interface ChatContextType extends ChatState {
  sendMessage: (content: string) => void
  connect: () => Promise<void>
  disconnect: () => void
  clearMessages: () => void
  clearConversation: () => Promise<void>
  retryConnection: () => Promise<void>
  loadConversation: () => Promise<void>
}

const ChatContext = createContext<ChatContextType | undefined>(undefined)

export function ChatProvider({ children }: { children: React.ReactNode }) {
  const { user, token, isAuthenticated } = useAuth()
  const [chatState, setChatState] = useState<ChatState>({
    messages: [],
    isConnected: false,
    isConnecting: false,
    error: null,
    hasHistory: false,
  })

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
  const loadConversation = useCallback(async (): Promise<void> => {
    if (!token) return

    try {
      console.log('üìñ Loading conversation history...')
      const conversation = await apiService.getConversation(token)
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ API –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
      const messages: Message[] = conversation.messages.map((msg: ApiChatMessage, index: number) => ({
        id: `hist_${index}_${Date.now()}`,
        content: msg.content,
        sender: msg.role === 'user' ? 'user' : 'assistant',
        timestamp: new Date(),
        status: 'sent'
      }))

      setChatState(prev => ({
        ...prev,
        messages,
        hasHistory: messages.length > 0
      }))
      
      console.log('‚úÖ Conversation history loaded:', messages.length, 'messages')
    } catch (error: any) {
      console.log('‚ÑπÔ∏è No conversation history found or error loading:', error.message)
      // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    }
  }, [token])

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
  const clearConversation = useCallback(async (): Promise<void> => {
    if (!token) return

    try {
      console.log('üóëÔ∏è Clearing conversation history...')
      await apiService.clearConversation(token)
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ)
      const lastMessage = chatState.messages[chatState.messages.length - 1]
      const clearedMessages = lastMessage ? [lastMessage] : []
      
      setChatState(prev => ({
        ...prev,
        messages: clearedMessages,
        hasHistory: false
      }))
      
      console.log('‚úÖ Conversation history cleared')
    } catch (error) {
      console.error('‚ùå Error clearing conversation:', error)
      throw error
    }
  }, [token, chatState.messages])

  const addMessage = useCallback((message: Message) => {
    setChatState(prev => ({
      ...prev,
      messages: [...prev.messages, message],
      error: null,
      hasHistory: true
    }))
  }, [])

  const updateMessageStatus = useCallback((messageId: string, status: Message['status']) => {
    setChatState(prev => ({
      ...prev,
      messages: prev.messages.map(msg =>
        msg.id === messageId ? { ...msg, status } : msg
      )
    }))
  }, [])

  const connect = useCallback(async (): Promise<void> => {
    if (!token || !isAuthenticated) {
      throw new Error('User not authenticated')
    }

    if (chatState.isConnected || chatState.isConnecting) {
      console.log('üîÑ Connection already in progress or established')
      return
    }

    console.log('üîå Starting WebSocket connection...')
    setChatState(prev => ({ ...prev, isConnecting: true, error: null }))

    try {
      await websocketService.connect(token)
      console.log('‚úÖ WebSocket connected successfully')
      setChatState(prev => ({ 
        ...prev, 
        isConnected: true, 
        isConnecting: false 
      }))
    } catch (error: any) {
      console.error('‚ùå WebSocket connection failed:', error)
      
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É'
      if (error.message?.includes('401')) {
        errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
      }
      
      setChatState(prev => ({
        ...prev,
        isConnecting: false,
        isConnected: false,
        error: errorMessage
      }))
      throw error
    }
  }, [token, isAuthenticated, chatState.isConnected, chatState.isConnecting])

  const disconnect = useCallback((): void => {
    console.log('üîå Disconnecting WebSocket...')
    websocketService.disconnect()
    setChatState(prev => ({
      ...prev,
      isConnected: false,
      isConnecting: false,
    }))
  }, [])

  const sendMessage = useCallback((content: string): void => {
    if (!chatState.isConnected) {
      throw new Error('WebSocket is not connected')
    }

    const userMessage: Message = {
      id: `user_${Date.now()}`,
      content,
      sender: 'user',
      timestamp: new Date(),
      status: 'sending'
    }

    addMessage(userMessage)

    try {
      websocketService.sendMessage(content)
      updateMessageStatus(userMessage.id, 'sent')
    } catch (error) {
      console.error('Error sending message:', error)
      updateMessageStatus(userMessage.id, 'error')
      setChatState(prev => ({ ...prev, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' }))
    }
  }, [chatState.isConnected, addMessage, updateMessageStatus])

  const clearMessages = useCallback((): void => {
    setChatState(prev => ({ 
      ...prev, 
      messages: [],
      hasHistory: false
    }))
  }, [])

  const retryConnection = useCallback(async (): Promise<void> => {
    console.log('üîÑ Manual reconnection attempt')
    await connect()
  }, [connect])

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è WebSocket
  useEffect(() => {
    const handleMessage = (message: Message) => {
      addMessage(message)
    }

    const handleConnectionChange = (connected: boolean) => {
      console.log(`üîå WebSocket connection changed: ${connected}`)
      setChatState(prev => ({
        ...prev,
        isConnected: connected,
        isConnecting: false,
      }))
    }

    const handleError = (error: string) => {
      console.error('‚ùå WebSocket error:', error)
      setChatState(prev => ({ 
        ...prev, 
        error,
        isConnecting: false 
      }))
    }

    websocketService.onMessage(handleMessage)
    websocketService.onConnectionChange(handleConnectionChange)
    websocketService.onError(handleError)

    return () => {
      websocketService.removeMessageHandler(handleMessage)
      websocketService.removeConnectionHandler(handleConnectionChange)
      websocketService.removeErrorHandler(handleError)
      disconnect()
    }
  }, [addMessage, disconnect])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    if (isAuthenticated && token) {
      console.log('üë§ User authenticated, loading conversation...')
      loadConversation()
    } else {
      // –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –æ—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      setChatState({
        messages: [],
        isConnected: false,
        isConnecting: false,
        error: null,
        hasHistory: false,
      })
    }
  }, [isAuthenticated, token, loadConversation])

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏)
  useEffect(() => {
    if (chatState.messages.length === 0 && user && !chatState.hasHistory) {
      const welcomeMessage: Message = {
        id: 'welcome',
        content: getWelcomeMessage(user.role),
        sender: 'assistant',
        timestamp: new Date(),
      }
      addMessage(welcomeMessage)
    }
  }, [user, chatState.messages.length, chatState.hasHistory, addMessage])

  const getWelcomeMessage = (role: string): string => {
    const messages = {
      student: "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —É—á–µ–±–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –≤—Å–µ–º, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º!",
      teacher: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π. –ü–æ–º–æ–≥—É —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.",
      management: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π, –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
      retraining: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –ü–æ–º–æ–≥—É —Å —É—á–µ–±–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º."
    }
    return messages[role as keyof typeof messages] || "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
  }

  return (
    <ChatContext.Provider value={{
      ...chatState,
      sendMessage,
      connect,
      disconnect,
      clearMessages,
      clearConversation,
      retryConnection,
      loadConversation,
    }}>
      {children}
    </ChatContext.Provider>
  )
}

export function useChat() {
  const context = useContext(ChatContext)
  if (context === undefined) {
    throw new Error('useChat must be used within a ChatProvider')
  }
  return context
}