"use client"

import React, { createContext, useContext, useState, useCallback, useEffect, useRef } from 'react'
import { Message, ChatState } from '@/types/chat'
import { Conversation, ChatMessage as ApiChatMessage } from '@/types/api'
import { websocketService } from '@/lib/websocket-service'
import { useAuth } from '@/context/auth-context'
import { apiService } from '@/lib/api'

interface ChatContextType extends ChatState {
  sendMessage: (content: string) => void
  connect: () => Promise<void>
  disconnect: () => void
  clearMessages: () => void
  clearAllHistory: () => Promise<void>
  retryConnection: () => Promise<void>
  loadHistory: () => Promise<void>
  loadConversation: (conversationId: string) => Promise<void>
}

const ChatContext = createContext<ChatContextType | undefined>(undefined)

export function ChatProvider({ children }: { children: React.ReactNode }) {
  const { user, token, isAuthenticated } = useAuth()
  const [chatState, setChatState] = useState<ChatState>({
    messages: [],
    isConnected: false,
    isConnecting: false,
    error: null,
    conversations: [],
    currentConversationId: null,
  })

  // Refs –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
  const connectionAttempted = useRef(false)
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null)
  const isMounted = useRef(true)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const loadHistory = useCallback(async (): Promise<void> => {
    if (!token) return

    try {
      const history = await apiService.getHistory(token)
      setChatState(prev => ({
        ...prev,
        conversations: history.conversations || []
      }))
    } catch (error) {
      console.error('Error loading history:', error)
    }
  }, [token])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–µ—Å–µ–¥—ã
  const loadConversation = useCallback(async (conversationId: string): Promise<void> => {
    if (!token) return

    try {
      const conversation = await apiService.getConversation(token, conversationId)
      const messages: Message[] = conversation.messages.map((msg: ApiChatMessage) => ({
        id: `${conversationId}_${msg.timestamp || Date.now()}`,
        content: msg.content,
        sender: msg.role === 'user' ? 'user' : 'assistant',
        timestamp: new Date(msg.timestamp || Date.now()),
        conversationId: conversationId
      }))

      setChatState(prev => ({
        ...prev,
        messages,
        currentConversationId: conversationId
      }))
    } catch (error) {
      console.error('Error loading conversation:', error)
    }
  }, [token])

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
  const clearAllHistory = useCallback(async (): Promise<void> => {
    if (!token) return

    try {
      await apiService.clearHistory(token)
      setChatState(prev => ({
        ...prev,
        messages: [],
        conversations: [],
        currentConversationId: null
      }))
    } catch (error) {
      console.error('Error clearing history:', error)
      throw error
    }
  }, [token])

  const addMessage = useCallback((message: Message) => {
    setChatState(prev => ({
      ...prev,
      messages: [...prev.messages, message],
      error: null
    }))
  }, [])

  const updateMessageStatus = useCallback((messageId: string, status: Message['status']) => {
    setChatState(prev => ({
      ...prev,
      messages: prev.messages.map(msg =>
        msg.id === messageId ? { ...msg, status } : msg
      )
    }))
  }, [])

  const connect = useCallback(async (): Promise<void> => {
    if (!token || !isAuthenticated) {
      throw new Error('User not authenticated')
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (chatState.isConnected || chatState.isConnecting || connectionAttempted.current) {
      console.log('üîÑ Connection already in progress or established')
      return
    }

    console.log('üîå Starting WebSocket connection...')
    connectionAttempted.current = true
    setChatState(prev => ({ ...prev, isConnecting: true, error: null }))

    try {
      await websocketService.connect(token)
      console.log('‚úÖ WebSocket connected successfully')
    } catch (error) {
      console.error('‚ùå WebSocket connection failed:', error)
      connectionAttempted.current = false
      setChatState(prev => ({
        ...prev,
        isConnecting: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É'
      }))
      throw error
    }
  }, [token, isAuthenticated, chatState.isConnected, chatState.isConnecting])

  const disconnect = useCallback((): void => {
    console.log('üîå Disconnecting WebSocket...')
    connectionAttempted.current = false
    websocketService.disconnect()
    setChatState(prev => ({
      ...prev,
      isConnected: false,
      isConnecting: false,
      error: null
    }))

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current)
    }
  }, [])

  const sendMessage = useCallback((content: string): void => {
    if (!chatState.isConnected) {
      throw new Error('WebSocket is not connected')
    }

    const userMessage: Message = {
      id: Date.now().toString(),
      content,
      sender: 'user',
      timestamp: new Date(),
      status: 'sending',
      conversationId: chatState.currentConversationId || undefined
    }

    addMessage(userMessage)

    try {
      websocketService.sendMessage(content)
      updateMessageStatus(userMessage.id, 'sent')
    } catch (error) {
      console.error('Error sending message:', error)
      updateMessageStatus(userMessage.id, 'error')
      setChatState(prev => ({ ...prev, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' }))
    }
  }, [chatState.isConnected, chatState.currentConversationId, addMessage, updateMessageStatus])

  const clearMessages = useCallback((): void => {
    setChatState(prev => ({ 
      ...prev, 
      messages: [],
      currentConversationId: null
    }))
  }, [])

  const retryConnection = useCallback(async (): Promise<void> => {
    console.log('üîÑ Manual reconnection attempt')
    await connect()
  }, [connect])

  // –£–º–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  const scheduleReconnect = useCallback(() => {
    if (!isMounted.current || !isAuthenticated) return

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current)
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (max 30 —Å–µ–∫—É–Ω–¥)
    const delay = Math.min(1000 * Math.pow(2, connectionAttempted.current ? 1 : 0), 30000)
    
    console.log(`üîÑ Scheduling reconnect in ${delay}ms`)
    
    reconnectTimeoutRef.current = setTimeout(() => {
      if (isMounted.current && isAuthenticated && !chatState.isConnected) {
        connect().catch(console.error)
      }
    }, delay)
  }, [isAuthenticated, chatState.isConnected, connect])

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è WebSocket
  useEffect(() => {
    const handleMessage = (message: Message) => {
      addMessage(message)
    }

    const handleConnectionChange = (connected: boolean) => {
      console.log(`üîå WebSocket connection changed: ${connected}`)
      setChatState(prev => ({
        ...prev,
        isConnected: connected,
        isConnecting: false,
        error: connected ? null : prev.error
      }))

      if (connected) {
        connectionAttempted.current = false
        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        if (reconnectTimeoutRef.current) {
          clearTimeout(reconnectTimeoutRef.current)
        }
      } else if (isMounted.current && isAuthenticated) {
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        connectionAttempted.current = false
        scheduleReconnect()
      }
    }

    const handleError = (error: string) => {
      console.error('‚ùå WebSocket error:', error)
      setChatState(prev => ({ 
        ...prev, 
        error, 
        isConnecting: false 
      }))
      connectionAttempted.current = false
    }

    websocketService.onMessage(handleMessage)
    websocketService.onConnectionChange(handleConnectionChange)
    websocketService.onError(handleError)

    return () => {
      websocketService.removeMessageHandler(handleMessage)
      websocketService.removeConnectionHandler(handleConnectionChange)
      websocketService.removeErrorHandler(handleError)
    }
  }, [addMessage, isAuthenticated, scheduleReconnect])

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    isMounted.current = true

    if (isAuthenticated && token) {
      console.log('üë§ User authenticated, connecting WebSocket...')
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      const timeout = setTimeout(() => {
        if (isMounted.current) {
          connect().catch(console.error)
        }
      }, 1000)

      return () => clearTimeout(timeout)
    } else {
      console.log('üë§ User not authenticated, disconnecting WebSocket...')
      disconnect()
    }

    return () => {
      isMounted.current = false
      disconnect()
    }
  }, [isAuthenticated, token, connect, disconnect])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    if (isAuthenticated && token) {
      loadHistory()
    }
  }, [isAuthenticated, token, loadHistory])

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  useEffect(() => {
    if (chatState.messages.length === 0 && user && chatState.isConnected) {
      const welcomeMessage: Message = {
        id: 'welcome',
        content: getWelcomeMessage(user.role),
        sender: 'assistant',
        timestamp: new Date(),
      }
      addMessage(welcomeMessage)
    }
  }, [user, chatState.messages.length, chatState.isConnected, addMessage])

  const getWelcomeMessage = (role: string): string => {
    const messages = {
      student: "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —É—á–µ–±–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –≤—Å–µ–º, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–≤–æ–∏–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º!",
      teacher: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π. –ü–æ–º–æ–≥—É —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞.",
      management: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π, –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.",
      retraining: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –ü–æ–º–æ–≥—É —Å —É—á–µ–±–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º."
    }
    return messages[role as keyof typeof messages] || "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
  }

  return (
    <ChatContext.Provider value={{
      ...chatState,
      sendMessage,
      connect,
      disconnect,
      clearMessages,
      clearAllHistory,
      retryConnection,
      loadHistory,
      loadConversation,
    }}>
      {children}
    </ChatContext.Provider>
  )
}

export function useChat() {
  const context = useContext(ChatContext)
  if (context === undefined) {
    throw new Error('useChat must be used within a ChatProvider')
  }
  return context
}